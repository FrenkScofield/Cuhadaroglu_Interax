// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DynamicSiteService.Migrations
{
    [DbContext(typeof(CMSDBContext))]
    [Migration("20201129235450_dbsdfsdfsdfsdsdf")]
    partial class dbsdfsdfsdfsdsdf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ContentPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BannerButtonText")
                        .HasColumnType("text");

                    b.Property<string>("BannerText")
                        .HasColumnType("text");

                    b.Property<string>("ButtonLink")
                        .HasColumnType("text");

                    b.Property<string>("ButtonText")
                        .HasColumnType("text");

                    b.Property<string>("ContentData")
                        .HasColumnType("text");

                    b.Property<int?>("ContentOrderNo")
                        .HasColumnType("integer");

                    b.Property<int?>("ContentPageId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentShort")
                        .HasColumnType("text");

                    b.Property<int>("ContentTypesId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalLink")
                        .HasColumnType("text");

                    b.Property<int?>("FormTypeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsClick")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsFooterMenu")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsGallery")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsHamburgerMenu")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsHeaderMenu")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMap")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPublish")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSideMenu")
                        .HasColumnType("boolean");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int>("LangId")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int?>("OrjId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrjId1")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<string>("VideoLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContentPageId");

                    b.HasIndex("ContentTypesId");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("LangId");

                    b.HasIndex("OrjId1");

                    b.ToTable("ContentPage");
                });

            modelBuilder.Entity("ContentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ContentTypes");
                });

            modelBuilder.Entity("Documents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alt")
                        .HasColumnType("text");

                    b.Property<int?>("BannerImageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int?>("GalleryId")
                        .HasColumnType("integer");

                    b.Property<string>("Guid")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int?>("PictureId")
                        .HasColumnType("integer");

                    b.Property<int?>("ThumbImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Types")
                        .HasColumnType("text");

                    b.Property<string>("data_class")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BannerImageId")
                        .IsUnique();

                    b.HasIndex("DocumentId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.HasIndex("ThumbImageId")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("FormType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FormType");
                });

            modelBuilder.Entity("Forms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<string>("Custom1")
                        .HasColumnType("text");

                    b.Property<string>("Custom2")
                        .HasColumnType("text");

                    b.Property<string>("Custom3")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("FormTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IsRead")
                        .HasColumnType("text");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormTypeId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("Lang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Lang");
                });

            modelBuilder.Entity("Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceConfigId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleParentId");

                    b.HasIndex("ServiceConfigId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ServiceConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("UrlTarget")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ServiceConfig");
                });

            modelBuilder.Entity("ServiceConfigAuth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCreate")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsList")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsUpdate")
                        .HasColumnType("boolean");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceConfigId")
                        .HasColumnType("integer");

                    b.Property<int?>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceConfigId");

                    b.HasIndex("UsersId");

                    b.ToTable("ServiceConfigAuth");
                });

            modelBuilder.Entity("SiteConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("text");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BodyScript")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultImage")
                        .HasColumnType("text");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("FooterScript")
                        .HasColumnType("text");

                    b.Property<string>("FooterStyle")
                        .HasColumnType("text");

                    b.Property<string>("GooglePlus")
                        .HasColumnType("text");

                    b.Property<string>("HeadScript")
                        .HasColumnType("text");

                    b.Property<string>("HeadStyle")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Instagram")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<string>("JokerPass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .HasColumnType("text");

                    b.Property<string>("MailGorunenAd")
                        .HasColumnType("text");

                    b.Property<string>("Map")
                        .HasColumnType("text");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<string>("SmtpMail")
                        .HasColumnType("text");

                    b.Property<string>("SmtpMailPass")
                        .HasColumnType("text");

                    b.Property<string>("SmtpPort")
                        .HasColumnType("text");

                    b.Property<bool?>("SmtpSSL")
                        .HasColumnType("boolean");

                    b.Property<string>("StartAction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartPage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tumblr")
                        .HasColumnType("text");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.Property<string>("Youtube")
                        .HasColumnType("text");

                    b.Property<string>("layoutID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("layoutUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("layoutUrlBase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SiteConfig");
                });

            modelBuilder.Entity("Spec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsTanim")
                        .HasColumnType("boolean");

                    b.Property<int>("LangId")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int?>("OrjId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("OrjId");

                    b.HasIndex("ParentId");

                    b.ToTable("Spec");
                });

            modelBuilder.Entity("SpecAttr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttrValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int>("LangId")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int?>("OrjId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("OrjId");

                    b.HasIndex("SpecId");

                    b.ToTable("SpecAttr");
                });

            modelBuilder.Entity("SpecContentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContentTypesId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int>("SpecId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypesId");

                    b.HasIndex("SpecId");

                    b.ToTable("SpecContentType");
                });

            modelBuilder.Entity("SpecContentValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContentPageId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LangId")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int>("SpecId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentPageId");

                    b.HasIndex("LangId");

                    b.HasIndex("SpecId");

                    b.ToTable("SpecContentValue");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Adress1")
                        .HasColumnType("text");

                    b.Property<string>("Adress2")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirdhDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("Mail1")
                        .HasColumnType("text");

                    b.Property<string>("Mail2")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone1")
                        .HasColumnType("text");

                    b.Property<string>("Phone2")
                        .HasColumnType("text");

                    b.Property<string>("Phone3")
                        .HasColumnType("text");

                    b.Property<string>("ProfilImage")
                        .HasColumnType("text");

                    b.Property<string>("SexType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserNo")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreaDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreaUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModUser")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("ContentPage", b =>
                {
                    b.HasOne("ContentPage", "Parent")
                        .WithMany("ContentPageChilds")
                        .HasForeignKey("ContentPageId");

                    b.HasOne("ContentTypes", "ContentTypes")
                        .WithMany("ContentPages")
                        .HasForeignKey("ContentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormType", "FormType")
                        .WithMany()
                        .HasForeignKey("FormTypeId");

                    b.HasOne("Lang", "Lang")
                        .WithMany("ContentPage")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentPage", "Orj")
                        .WithMany()
                        .HasForeignKey("OrjId1");
                });

            modelBuilder.Entity("Documents", b =>
                {
                    b.HasOne("ContentPage", "BannerImage")
                        .WithOne("BannerImage")
                        .HasForeignKey("Documents", "BannerImageId");

                    b.HasOne("ContentPage", "Document")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentId");

                    b.HasOne("ContentPage", "Gallery")
                        .WithMany("Gallery")
                        .HasForeignKey("GalleryId");

                    b.HasOne("ContentPage", "Picture")
                        .WithOne("Picture")
                        .HasForeignKey("Documents", "PictureId");

                    b.HasOne("ContentPage", "ThumbImage")
                        .WithOne("ThumbImage")
                        .HasForeignKey("Documents", "ThumbImageId");
                });

            modelBuilder.Entity("Forms", b =>
                {
                    b.HasOne("FormType", "FormType")
                        .WithMany("Forms")
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Permission", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.HasOne("Role", "RoleParent")
                        .WithMany("ParentRoles")
                        .HasForeignKey("RoleParentId");

                    b.HasOne("ServiceConfig", null)
                        .WithMany("Role")
                        .HasForeignKey("ServiceConfigId");
                });

            modelBuilder.Entity("ServiceConfig", b =>
                {
                    b.HasOne("ServiceConfig", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("ServiceConfigAuth", b =>
                {
                    b.HasOne("Permission", "Permission")
                        .WithMany("ServiceConfigAuth")
                        .HasForeignKey("PermissionId");

                    b.HasOne("Role", "Role")
                        .WithMany("ServiceConfigAuth")
                        .HasForeignKey("RoleId");

                    b.HasOne("ServiceConfig", "ServiceConfig")
                        .WithMany("ServiceConfigAuth")
                        .HasForeignKey("ServiceConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "Users")
                        .WithMany("ServiceConfigAuth")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("Spec", b =>
                {
                    b.HasOne("Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spec", "Orj")
                        .WithMany()
                        .HasForeignKey("OrjId");

                    b.HasOne("Spec", "Parent")
                        .WithMany("SpecChilds")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SpecAttr", b =>
                {
                    b.HasOne("Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spec", "Orj")
                        .WithMany()
                        .HasForeignKey("OrjId");

                    b.HasOne("Spec", "Spec")
                        .WithMany("SpecAttrs")
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpecContentType", b =>
                {
                    b.HasOne("ContentTypes", "ContentTypes")
                        .WithMany("SpecContentTypes")
                        .HasForeignKey("ContentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spec", "Spec")
                        .WithMany()
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpecContentValue", b =>
                {
                    b.HasOne("ContentPage", "ContentPage")
                        .WithMany("SpecContentValue")
                        .HasForeignKey("ContentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId");

                    b.HasOne("Spec", "Spec")
                        .WithMany("SpecContentValue")
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
