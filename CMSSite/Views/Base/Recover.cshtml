@{
    Layout = "_Layout";
    var userRecover = ViewBag.UserRecover as UserModel;
}

<script>var KTAppSettings = { "breakpoints": { "sm": 576, "md": 768, "lg": 992, "xl": 1200, "xxl": 1200 }, "colors": { "theme": { "base": { "white": "#ffffff", "primary": "#8950FC", "secondary": "#E5EAEE", "success": "#1BC5BD", "info": "#8950FC", "warning": "#FFA800", "danger": "#F64E60", "light": "#F3F6F9", "dark": "#212121" }, "light": { "white": "#ffffff", "primary": "#E1E9FF", "secondary": "#ECF0F3", "success": "#C9F7F5", "info": "#EEE5FF", "warning": "#FFF4DE", "danger": "#FFE2E5", "light": "#F3F6F9", "dark": "#D6D6E0" }, "inverse": { "white": "#ffffff", "primary": "#ffffff", "secondary": "#212121", "success": "#ffffff", "info": "#ffffff", "warning": "#ffffff", "danger": "#ffffff", "light": "#464E5F", "dark": "#ffffff" } }, "gray": { "gray-100": "#F3F6F9", "gray-200": "#ECF0F3", "gray-300": "#E5EAEE", "gray-400": "#D6D6E0", "gray-500": "#B5B5C3", "gray-600": "#80808F", "gray-700": "#464E5F", "gray-800": "#1B283F", "gray-900": "#212121" } }, "font-family": "Poppins" };</script>
<script src="~/assets-site/css/login/classic/plugins.bundle.js"></script>
<script src="~/assets-site/css/login/classic/prismjs.bundle.js"></script>
<script src="~/assets-site/css/login/plugins.bundle.js"></script>
<script src="~/assets-site/css/login/classic/general.js"></script>
<link href="/assets-site/css/fstyle.bundle.css" rel="stylesheet" />
<link href="~/assets-site/plugins/sweetalert/sweetalert.css" rel="stylesheet" />
<script src="~/assets-site/plugins/sweetalert/sweetalert.min.js"></script>

<link href="/assets-site/css/fstyle.bundle.css" rel="stylesheet" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/10.16.6/sweetalert2.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/10.16.6/sweetalert2.all.js"></script>

<div class="section-full p-tb80 inner-page-padding stick_in_parent ">
    <div class="container">
        <div class="row ">
            <div class="login login-1 login-signin-on d-flex flex-column flex-lg-row flex-column-fluid bg-white" id="kt_login">
                <!--begin::Content-->
                <div class="login-content flex-row-fluid d-flex flex-column justify-content-center position-relative overflow-hidden p-7 mx-auto">
                    <!--begin::Content body-->
                    <div class="d-flex flex-column-fluid flex-center">
                        <!--begin::Signin-->
                        <div class="login-form login-signin">
                            <!--begin::Form-->
                            @if (userRecover != null)
                            {
                                <form class="form" novalidate="novalidate" id="kt_login_signin_form">
                                    <!--begin::Title-->
                                    <div class="pb-13 pt-lg-0 pt-5">
                                        <h3 class="font-weight-bolder text-dark font-size-h4 font-size-h1-lg">Şifre Sıfırlama</h3>
                                    </div>
                                    <!--begin::Title-->
                                    <!--begin::Form group-->

                                    @Html.AntiForgeryToken()
                                    <input type="hidden" value="@userRecover.UserToken" name="userToken" />
                                    <div class="row form-group">
                                        <div class="col-md-6">
                                            <label class="font-size-h6 font-weight-bolder text-dark">Yeni Şifre</label>
                                            <input required class="form-control form-control-solid h-auto py-6 px-6 rounded-lg" type="password" name="Pass" id="Pass" autocomplete="off" />
                                        </div>
                                        <div class="col-md-6">
                                            <label class="font-size-h6 font-weight-bolder text-dark">Yeni Şifre Tekrar</label>
                                            <input required class="form-control form-control-solid h-auto py-6 px-6 rounded-lg" type="password" name="PassReply" id="PassReply" autocomplete="off" />
                                        </div>
                                    </div>


                                    <!--end::Form group-->
                                    <!--begin::Action-->
                                    <div class="pb-lg-0 pb-5">
                                        <button type="button" id="f-login" class="btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-3">Kaydet</button>
                                    </div>
                                    <!--end::Action-->
                                </form>
                            }
                            else
                            {
                                <div class="pb-13 pt-lg-0 pt-5">
                                    <h3 class="font-weight-bolder text-dark font-size-h4 font-size-h1-lg">Şifre Sıfırlama</h3>
                                </div>
                                <div class="row form-group">
                                    <div class="col-md-12">
                                        <label class="font-size-h6 font-weight-bolder text-dark">Hata oluştu. Lütfen daha sonra tekrar deneyiniz.</label>
                                    </div>
                                </div>
                            }

                            <!--end::Form-->
                        </div>
                        <!--end::Signin-->
                    </div>
                    <!--end::Content body-->
                </div>
                <!--end::Content-->
            </div>
        </div>
    </div>
</div>
<link href="/assets-site/css/login/login-1.css" rel="stylesheet" />
<script src="/assets-site/css/login/login-1.js"></script>
<script type="text/javascript">

    "use strict";

    // Class Definition
    var KTLogin = function () {
        var _login;

        var _showForm = function (form) {
            var cls = 'login-' + form + '-on';
            var form = 'kt_login_' + form + '_form';

            _login.removeClass('login-forgot-on');
            _login.removeClass('login-signin-on');
            _login.removeClass('login-signup-on');

            _login.addClass(cls);

            KTUtil.animateClass(KTUtil.getById(form), 'animate__animated animate__backInUp');
        }

        var _handleSignInForm = function () {
            var validation;

            // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/
            validation = FormValidation.formValidation(
                KTUtil.getById('kt_login_signin_form'),
                {
                    fields: {
                        Pass: {
                            validators: {
                                notEmpty: {
                                    message: 'Şifre Giriniz'
                                }
                            },
                        },
                        PassReply: {
                            validators: {
                                notEmpty: {
                                    message: 'Şifre Tekrar Giriniz'
                                }
                            },
                            identical: {
                                compare: function () {
                                    return form.querySelector('[name="Pass"]').value;
                                },
                                message: 'Şifreler Eşleşmiyor'
                            }
                        },
                        Name: {
                            validators: {
                                notEmpty: {
                                    message: 'Ad Giriniz'
                                }
                            }
                        },
                        Surname: {
                            validators: {
                                notEmpty: {
                                    message: 'Soyad Giriniz'
                                }
                            }
                        },
                        UserName: {
                            validators: {
                                notEmpty: {
                                    message: 'Mail Adresi Giriniz'
                                }
                            }
                        },
                        Phone1: {
                            validators: {
                                notEmpty: {
                                    message: 'Telefon Giriniz'
                                }
                            }
                        },
                        Company: {
                            validators: {
                                notEmpty: {
                                    message: 'Firma Giriniz'
                                }
                            }
                        },
                        dp_UserType: {
                            validators: {
                                notEmpty: {
                                    message: 'Kullanıcı Tipi Giriniz'
                                }
                            }
                        }

                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger(),
                        submitButton: new FormValidation.plugins.SubmitButton(),
                        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation
                        bootstrap: new FormValidation.plugins.Bootstrap()
                    }
                }
            );


            $('#f-login').on('click', function (e) {

                e.preventDefault();
                validation.validate().then(function (status) {
                    console.log("afterValidate");
                    console.log("status " + status);
                    if (status == 'Valid') {
                        var postModel = $.fn.toForm("#kt_login_signin_form");

                        debugger;
                        if (postModel.Pass != postModel.PassReply) {
                            alert('Şifreler Eşleşmiyor...');
                            return;
                        }

                        $.ajx('/Base/UserRecover', postModel, function (result) {

                            debugger;
                            if (result=="OK") {

                                swal.fire({
                                    text: "Şifreniz Başarıyla Değiştirilmiştir",
                                    icon: "success",
                                    buttonsStyling: false,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn font-weight-bold btn-light-primary"
                                    }
                                }).then(function () {
                                    KTUtil.scrollTop(); window.location = "/Login";
                                });

                            }
                            else if (result == "Dublicate") {
                                swal.fire({
                                    text: "Hata oluştu.",
                                    icon: "error",
                                    buttonsStyling: false,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn font-weight-bold btn-light-primary"
                                    }
                                }).then(function () {
                                    KTUtil.scrollTop();
                                });
                            }

                        });


                    } else {
                        //swal.fire({
                        //    text: "Hata, lütfen daha sonra tekrar deneyiniz.",
                        //    icon: "error",
                        //    buttonsStyling: false,
                        //    confirmButtonText: "Tamam",
                        //    customClass: {
                        //        confirmButton: "btn font-weight-bold btn-light-primary"
                        //    }
                        //}).then(function () {
                        //    KTUtil.scrollTop();
                        //});
                    }
                });
            });


            // Handle forgot button
            $('#kt_login_forgot').on('click', function (e) {
                e.preventDefault();
                _showForm('forgot');
            });

            // Handle signup
            $('#kt_login_signup').on('click', function (e) {
                e.preventDefault();
                _showForm('signup');
            });
        }

        var _handleSignUpForm = function (e) {
            var validation;
            var form = KTUtil.getById('kt_login_signup_form');

            // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/
            validation = FormValidation.formValidation(
                form,
                {
                    fields: {
                        fullname: {
                            validators: {
                                notEmpty: {
                                    message: 'Username is required'
                                }
                            }
                        },
                        email: {
                            validators: {
                                notEmpty: {
                                    message: 'Email address is required'
                                },
                                emailAddress: {
                                    message: 'The value is not a valid email address'
                                }
                            }
                        },
                        password: {
                            validators: {
                                notEmpty: {
                                    message: 'The password is required'
                                }
                            }
                        },
                        cpassword: {
                            validators: {
                                notEmpty: {
                                    message: 'The password confirmation is required'
                                },
                                identical: {
                                    compare: function () {
                                        return form.querySelector('[name="password"]').value;
                                    },
                                    message: 'The password and its confirm are not the same'
                                }
                            }
                        },
                        agree: {
                            validators: {
                                notEmpty: {
                                    message: 'You must accept the terms and conditions'
                                }
                            }
                        },
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger(),
                        bootstrap: new FormValidation.plugins.Bootstrap()
                    }
                }
            );

            $('#kt_login_signup_submit').on('click', function (e) {
                e.preventDefault();

                validation.validate().then(function (status) {
                    if (status == 'Valid') {
                        swal.fire({
                            text: "All is cool! Now you submit this form",
                            icon: "success",
                            buttonsStyling: false,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn font-weight-bold btn-light-primary"
                            }
                        }).then(function () {
                            KTUtil.scrollTop();
                        });
                    } else {
                        swal.fire({
                            text: "Sorry, looks like there are some errors detected, please try again.",
                            icon: "error",
                            buttonsStyling: false,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn font-weight-bold btn-light-primary"
                            }
                        }).then(function () {
                            KTUtil.scrollTop();
                        });
                    }
                });
            });

            // Handle cancel button
            $('#kt_login_signup_cancel').on('click', function (e) {
                e.preventDefault();

                _showForm('signin');
            });
        }

        var _handleForgotForm = function (e) {
            var validation;

            // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/
            validation = FormValidation.formValidation(
                KTUtil.getById('kt_login_forgot_form'),
                {
                    fields: {
                        email: {
                            validators: {
                                notEmpty: {
                                    message: 'Email address is required'
                                },
                                emailAddress: {
                                    message: 'The value is not a valid email address'
                                }
                            }
                        }
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger(),
                        bootstrap: new FormValidation.plugins.Bootstrap()
                    }
                }
            );

            // Handle submit button
            $('#kt_login_forgot_submit').on('click', function (e) {
                e.preventDefault();
                validation.validate().then(function (status) {
                    if (status == 'Valid') {




                    } else {
                        swal.fire({
                            text: "Sorry, looks like there are some errors detected, please try again.",
                            icon: "error",
                            buttonsStyling: false,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn font-weight-bold btn-light-primary"
                            }
                        }).then(function () {
                            KTUtil.scrollTop();
                        });
                    }
                });
            });

            // Handle cancel button
            $('#kt_login_forgot_cancel').on('click', function (e) {
                e.preventDefault();

                _showForm('signin');
            });
        }

        // Public Functions
        return {
            // public functions
            init: function () {
                _login = $('#kt_login');

                _handleSignInForm();
                _handleSignUpForm();
                _handleForgotForm();
            }
        };
    }();

    // Class Initialization
    jQuery(document).ready(function () {
        KTLogin.init();
    });


</script>












